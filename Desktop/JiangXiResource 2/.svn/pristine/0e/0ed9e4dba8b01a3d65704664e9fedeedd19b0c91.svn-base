//
//  QRCordViewController.m
//  YDResourceManagement
//
//  Created by 吴新杰 on 15/11/13.
//  Copyright © 2015年 wuxinjie. All rights reserved.
//

#import "QRCordViewController.h"
#import <ZXingObjC/ZXingObjC.h>
#import "CommonDefine.h"
#import "AFURLSessionManager.h"
#import "MBProgressHUD.h"
#import "CommonLogic.h"

@interface QRCordViewController ()<UITextFieldDelegate,UINavigationControllerDelegate, UIImagePickerControllerDelegate,UIAlertViewDelegate>

@property (nonatomic , copy) NSString *usertoken;

@property(nonatomic, assign)CGRect imageRect;
/**
 * 开灯
 */
@property(nonatomic, retain)UIButton *lightBtn;
/**
 * 二维码输入框
 */
@property(nonatomic, retain)UITextField *tf;
/**
 * 修改二维码输入方式
 */
@property(nonatomic, retain)UIButton *changeBtn;
/**
 * 手动输入完成后确认
 */
@property(nonatomic, retain)UIButton *okBtn;
@property(nonatomic, copy)NSString *codeNum;// 二维码数字
@end

@implementation QRCordViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationController.navigationBar.translucent = NO;
    
    self.view.backgroundColor = [UIColor grayColor];
    _usertoken = [[NSUserDefaults standardUserDefaults] valueForKey:user_token];
    //    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"返回" style:UIBarButtonItemStylePlain target:self action:@selector(backAction)];
    self.title = @"二维码/条形码";
    
    // 初始化控件
    UILabel * labIntroudction= [[UILabel alloc] init];
    labIntroudction.translatesAutoresizingMaskIntoConstraints = NO;
    labIntroudction.textAlignment = NSTextAlignmentCenter;
    labIntroudction.backgroundColor = [UIColor clearColor];
    labIntroudction.numberOfLines=2;
    labIntroudction.textColor=[UIColor whiteColor];
    labIntroudction.text=@"对准二维码/条形码到框内即可扫描";
    [self.view addSubview:labIntroudction];
    
    UIImageView * imageView = [[UIImageView alloc]init];
    imageView.translatesAutoresizingMaskIntoConstraints = NO;
    imageView.image = [UIImage imageNamed:@"pick_bg"];
    [self.view addSubview:imageView];
    
    UIView *buttonView = [[UIView alloc] init];
    buttonView.translatesAutoresizingMaskIntoConstraints = NO;
    [self.view addSubview:buttonView];
    
    self.lightBtn  = [UIButton buttonWithType:UIButtonTypeCustom];
    self.lightBtn.translatesAutoresizingMaskIntoConstraints = NO;
    [self.lightBtn setImage:[UIImage imageNamed:@"flashlight"] forState:UIControlStateNormal];
    self.lightBtn.imageView.contentMode = UIViewContentModeScaleAspectFit;
    [self.lightBtn setTitle:@"开灯" forState:UIControlStateNormal];
    [self.lightBtn addTarget:self action:@selector(lightAction) forControlEvents:UIControlEventTouchUpInside];
    [buttonView addSubview:self.lightBtn];
    
    UIButton *codeBtn  = [UIButton buttonWithType:UIButtonTypeCustom];
    codeBtn.translatesAutoresizingMaskIntoConstraints = NO;
    [codeBtn setImage:[UIImage imageNamed:@"btn_input_barcode"] forState:UIControlStateNormal];
    codeBtn.imageView.contentMode = UIViewContentModeScaleAspectFit;
    [codeBtn setTitle:@"输入条码" forState:UIControlStateNormal];
    [codeBtn addTarget:self action:@selector(codeAction) forControlEvents:UIControlEventTouchUpInside];
    [buttonView addSubview:codeBtn];
    
    UIButton *albumBtn  = [UIButton buttonWithType:UIButtonTypeCustom];
    albumBtn.translatesAutoresizingMaskIntoConstraints = NO;
    [albumBtn setImage:[UIImage imageNamed:@"btn_gallery"] forState:UIControlStateNormal];
    albumBtn.imageView.contentMode = UIViewContentModeScaleAspectFit;
    [albumBtn setTitle:@"从相册找" forState:UIControlStateNormal];
    [albumBtn addTarget:self action:@selector(albumAction) forControlEvents:UIControlEventTouchUpInside];
    [buttonView addSubview:albumBtn];
    
    // 设置View约束
    NSArray *vCon;
    if (SCREEN_HEIGHT == 480) {
        vCon = [NSLayoutConstraint constraintsWithVisualFormat:@"V:|-15-[label]-10-[imageView]-10-[buttonView]-0-|" options:0 metrics:nil views:@{@"label": labIntroudction, @"imageView": imageView, @"buttonView": buttonView}];
    } else {
        vCon = [NSLayoutConstraint constraintsWithVisualFormat:@"V:|-15-[label]-10-[imageView]-10-[buttonView]-50-|" options:0 metrics:nil views:@{@"label": labIntroudction, @"imageView": imageView, @"buttonView": buttonView}];
    }
    NSArray *labelCon = [NSLayoutConstraint constraintsWithVisualFormat:@"H:|-0-[label]-0-|" options:0 metrics:nil views:@{@"label": labIntroudction}];
    NSArray *imageCon = [NSLayoutConstraint constraintsWithVisualFormat:@"H:|-20-[imageView]-20-|" options:0 metrics:nil views:@{@"imageView": imageView}];
    NSLayoutConstraint *imageCon2 = [NSLayoutConstraint constraintWithItem:imageView attribute:NSLayoutAttributeHeight relatedBy:0 toItem:imageView attribute:NSLayoutAttributeWidth multiplier:1 constant:0];
    NSArray *buttonViewCon = [NSLayoutConstraint constraintsWithVisualFormat:@"H:|-0-[buttonView]-0-|" options:0 metrics:nil views:@{@"buttonView": buttonView}];
    [self.view addConstraints:vCon];
    [self.view addConstraints:labelCon];
    [self.view addConstraints:imageCon];
    [self.view addConstraints:@[imageCon2]];
    [self.view addConstraints:buttonViewCon];
    
    // 设置buttonView约束
    NSArray *vBtn = [NSLayoutConstraint constraintsWithVisualFormat:@"V:|-5-[btn1]-[btn2(==btn1)]-5-|" options:0 metrics:nil views:@{@"btn1":self.lightBtn, @"btn2":codeBtn}];
    NSArray *vBtn2 = [NSLayoutConstraint constraintsWithVisualFormat:@"V:|-5-[btn1]-[btn2]-5-|" options:0 metrics:nil views:@{@"btn1":self.lightBtn, @"btn2":albumBtn}];
    NSArray *btn1Con = [NSLayoutConstraint constraintsWithVisualFormat:@"H:|-0-[btn1]-0-|" options:0 metrics:nil views:@{@"btn1":self.lightBtn}];
    NSArray *btn2Con = [NSLayoutConstraint constraintsWithVisualFormat:@"H:|-0-[btn2]-[btn3(==btn2)]-0-|" options:0 metrics:nil views:@{@"btn2": codeBtn, @"btn3":albumBtn}];
    [buttonView addConstraints:vBtn];
    [buttonView addConstraints:vBtn2];
    [buttonView addConstraints:btn1Con];
    [buttonView addConstraints:btn2Con];
    
    
    // 加入下面两句话可知道自适应的frame
    [self.view setNeedsLayout];
    [self.view layoutIfNeeded];
    // 设置扫描图画
    upOrdown = NO;
    num =0;
    _line = [[UIImageView alloc] init];
    _line.image = [UIImage imageNamed:@"line.png"];
    imageView.userInteractionEnabled = YES;
    [imageView addSubview:_line];
    
    timer = [NSTimer scheduledTimerWithTimeInterval:.02 target:self selector:@selector(animation1) userInfo:nil repeats:YES];
    self.imageRect = imageView.frame;
    _line.frame = CGRectMake(0, self.imageRect.size.height / 2, imageView.frame.size.width, 2);
    
    
    // 设置输入框
    _tf = [[UITextField alloc] initWithFrame:CGRectMake(0, self.imageRect.size.height / 2 - 20, imageView.frame.size.width, 40)];
    _tf.delegate = self;
    _tf.hidden = YES;
    _tf.backgroundColor = [UIColor whiteColor];
    _tf.layer.borderColor = [UIColor whiteColor].CGColor;
    _tf.layer.borderWidth = 2;
    [imageView addSubview:_tf];
    
    _changeBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    _changeBtn.frame = CGRectMake(0, CGRectGetMaxY(_tf.frame), imageView.frame.size.width/2, 40);
    _changeBtn.tag = 1;
    _changeBtn.hidden = YES;
    [_changeBtn setTitle:@"切换扫码" forState:UIControlStateNormal];
    [_changeBtn setImage:[UIImage imageNamed:@"scan"] forState:UIControlStateNormal];
    [_changeBtn addTarget:self action:@selector(btnAction:) forControlEvents:UIControlEventTouchUpInside];
    [imageView addSubview:_changeBtn];
    
    _okBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    _okBtn.frame = CGRectMake(CGRectGetMaxX(_changeBtn.frame), CGRectGetMaxY(_tf.frame), imageView.frame.size.width/2, 40);
    _okBtn.hidden = YES;
    _okBtn.tag = 2;
    [_okBtn setTitle:@"确认" forState:UIControlStateNormal];
    [_okBtn addTarget:self action:@selector(btnAction:) forControlEvents:UIControlEventTouchUpInside];
    [imageView addSubview:_okBtn];
    
    if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) {
        [self setupCamera];
    }
}
- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    _tf.hidden = YES;
    _changeBtn.hidden = YES;
    _okBtn.hidden = YES;
    if (_session) {
        [_session startRunning];
    }
    if (timer) {
        [timer setFireDate:[NSDate date]];
    }
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    if (_session) {
        [_session stopRunning];
    }
    if (timer) {
        [timer setFireDate:[NSDate distantFuture]];
    }
}

-(void)animation1
{
    if (upOrdown == NO) {
        _line.center = CGPointMake(_line.center.x, _line.center.y + 3);
        if (_line.center.y >= self.imageRect.size.height) {
            upOrdown = YES;
        }
    }
    else {
        _line.center = CGPointMake(_line.center.x, _line.center.y - 3);
        if (_line.center.y <= 0) {
            upOrdown = NO;
        }
    }
    
}

- (void)dealloc
{
    [timer invalidate];
    timer = nil;
    NSLog(@"dealloc");
}

- (void)backAction
{
    [timer invalidate];
    timer = nil;
    [self.navigationController popToRootViewControllerAnimated:YES];
}

// 打开闪光灯
- (void)lightAction
{
    if ([_device hasTorch]) {
        [_device lockForConfiguration:nil];
        if (_device.torchMode == AVCaptureFlashModeOff) {
            [self.lightBtn setTitle:@"关灯" forState:UIControlStateNormal];
            [_device setTorchMode:AVCaptureTorchModeOn];
        } else {
            [self.lightBtn setTitle:@"开灯" forState:UIControlStateNormal];
            [_device setTorchMode:AVCaptureTorchModeOff];
        }
        [_device unlockForConfiguration];
    }
}

// 手动输入条码
- (void)codeAction
{
    [_session stopRunning];
    _preview.hidden = YES;
    _line.hidden = YES;
    [timer setFireDate:[NSDate distantFuture]];
    _tf.hidden = NO;
    _changeBtn.hidden = NO;
    _okBtn.hidden = NO;
}

- (void)albumAction
{
    UIImagePickerController *picker = [[UIImagePickerController alloc] init];
    picker.allowsEditing = YES;
    picker.delegate = self;
    picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
    [self presentViewController:picker animated:YES completion:^{}];
}

- (void)btnAction:(UIButton *)btn
{
    [self.view endEditing:YES];
    if (btn.tag == 1) {
        // 切换扫码方式
        _tf.hidden = YES;
        _changeBtn.hidden = YES;
        _okBtn.hidden = YES;
        [_session startRunning];
        [timer setFireDate:[NSDate distantPast]];
        _preview.hidden = NO;
        _line.hidden = NO;
    } else {
        // 确认
        self.codeNum = _tf.text;
        [self sendRequest];
    }
}

- (void)setupCamera
{
    // 判断是否有权限访问相机
    AVAuthorizationStatus authStatus = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];
    if (authStatus == AVAuthorizationStatusRestricted || authStatus ==AVAuthorizationStatusDenied)
    {
        //无权限
        // 跳到设置页面
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"无法使用相机" message:@"请在iPhone的“设置-隐私-相机”中允许访问相机。" delegate:nil cancelButtonTitle:@"确定" otherButtonTitles:nil];
        [alert show];
    } else {
        // Device
        _device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
        
        // Input
        _input = [AVCaptureDeviceInput deviceInputWithDevice:self.device error:nil];
        
        // Output
        _output = [[AVCaptureMetadataOutput alloc]init];
        [_output setMetadataObjectsDelegate:self queue:dispatch_get_main_queue()];
        
        // Session
        _session = [[AVCaptureSession alloc]init];
        [_session setSessionPreset:AVCaptureSessionPresetHigh];
        if ([_session canAddInput:self.input])
        {
            [_session addInput:self.input];
        }
        
        if ([_session canAddOutput:self.output])
        {
            [_session addOutput:self.output];
        }
        
        // 条码类型 AVMetadataObjectTypeQRCode
        _output.metadataObjectTypes =@[AVMetadataObjectTypeEAN13Code,
                                       AVMetadataObjectTypeEAN8Code,
                                       AVMetadataObjectTypeCode128Code,
                                       AVMetadataObjectTypeQRCode];
        _output.rectOfInterest = CGRectMake(0.1, 0.2, 1, 0.8);
        
        // Preview
        _preview =[AVCaptureVideoPreviewLayer layerWithSession:self.session];
        _preview.videoGravity = AVLayerVideoGravityResizeAspectFill;
        _preview.frame = CGRectMake(self.imageRect.origin.x, self.imageRect.origin.y - 64, self.imageRect.size.width, self.imageRect.size.height);
        [self.view.layer insertSublayer:self.preview atIndex:0];
        
        // Start
        [_session startRunning];
    }
}

#pragma mark AVCaptureMetadataOutputObjectsDelegate
- (void)captureOutput:(AVCaptureOutput *)captureOutput didOutputMetadataObjects:(NSArray *)metadataObjects fromConnection:(AVCaptureConnection *)connection
{
    
    NSString *stringValue;
    
    if ([metadataObjects count] >0)
    {
        AVMetadataMachineReadableCodeObject * metadataObject = [metadataObjects objectAtIndex:0];
        stringValue = metadataObject.stringValue;
    }
    
    [_session stopRunning];
    [timer setFireDate:[NSDate distantFuture]];
    NSLog(@"%@",stringValue);
    self.codeNum = stringValue;
    [self sendRequest];
}

#pragma mark UITextField Deleagte
-(BOOL)textFieldShouldReturn:(UITextField *)textField
{
    [textField resignFirstResponder];
    return YES;
}

- (BOOL)textFieldShouldClear:(UITextField *)textField
{
    [textField resignFirstResponder];
    return YES;
}

#pragma mark UIImagePickerControllerDelegate
- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *,id> *)info
{
    UIImage *image = [info objectForKey:@"UIImagePickerControllerEditedImage"];
    WeakSelf;
    [self dismissViewControllerAnimated:YES completion:^{
        [weakSelf getURLWithImage:image];
    }
     ];
}

- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
{
    [self dismissViewControllerAnimated:YES completion:nil];
}

#pragma mark Other method
-(void)getURLWithImage:(UIImage *)img{
    
    UIImage *loadImage= img;
    CGImageRef imageToDecode = loadImage.CGImage;
    
    ZXLuminanceSource *source = [[ZXCGImageLuminanceSource alloc] initWithCGImage:imageToDecode];
    ZXBinaryBitmap *bitmap = [ZXBinaryBitmap binaryBitmapWithBinarizer:[ZXHybridBinarizer binarizerWithSource:source]];
    
    NSError *error = nil;
    
    ZXDecodeHints *hints = [ZXDecodeHints hints];
    
    ZXMultiFormatReader *reader = [ZXMultiFormatReader reader];
    ZXResult *result = [reader decode:bitmap
                                hints:hints
                                error:&error];
    if (result) {
        // The coded result as a string. The raw data can be accessed with
        // result.rawBytes and result.length.
        self.codeNum = result.text;
        NSLog(@"contents =%@",self.codeNum);
        [self sendRequest];
    } else {
        UIAlertView *alter1 = [[UIAlertView alloc] initWithTitle:@"解析失败" message:nil delegate:nil cancelButtonTitle:@"确定" otherButtonTitles: nil];
        [alter1 show];
    }
}

#pragma mark 二维码请求
- (void)sendRequest
{
    // 需要传递的参数和url
    NSMutableDictionary *parameters = [[NSMutableDictionary alloc] initWithCapacity:0];
    NSString *url;
    
    if (self.qrType == QRTypeDefault) {
        [parameters setObject:self.codeNum forKey:@"qrCode"];
//        url = [NSString stringWithFormat:@"%@%@",CurrentUrl_Value,ANALYSIS_QRCODE];
    } else if (self.qrType == QRTypeMap) {
        [parameters setObject:self.codeNum forKey:@"towDimensionCode"];
//        url = [NSString stringWithFormat:@"%@%@",CurrentUrl_Value,INVENTORY_QR_CODE];
    } else if (self.qrType == QRTypeFeedback) {
        [parameters setObject:self.codeNum forKey:@"qrCode"];
//        url = [NSString stringWithFormat:@"%@%@",CurrentUrl_Value,INVENTORY_GET_ENTITY_INFOFOR_FEEDBACK];
    } else if (self.qrType == QRTypeChatViewController) {
        [parameters setObject:self.codeNum forKey:@"towDimensionCode"];
//        url = [NSString stringWithFormat:@"%@%@",CurrentUrl_Value,INVENTORY_QR_CODE];
    }
    
    // 请求
    [self sendRequestWithUrl:url params:parameters];

}

#pragma mark -----------实际请求-----------
/**
 *  AFNetworking请求
 *
 *  @param url    url
 *  @param params 参数
 */
- (void)sendRequestWithUrl:(NSString *)url params:(NSDictionary *)params
{
    // 开启菊花
    [MBProgressHUD showHUDAddedTo:self.view animated:YES];
    
    // 字典转json
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:params options:NSJSONWritingPrettyPrinted error:nil];
    NSString *jsonString = [[NSString alloc] initWithData:jsonData
                                                 encoding:NSUTF8StringEncoding];
    // josn数据存入字典
    NSMutableDictionary *dicts = [[NSMutableDictionary alloc] initWithCapacity:0];
    [dicts setValue:jsonString forKey:@"params"];
    [dicts setValue:_usertoken forKey:@"token"];
    
    NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];
    AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];
    
    NSMutableURLRequest *request = [[AFHTTPRequestSerializer serializer]requestWithMethod:@"POST" URLString:url parameters:dicts error:nil];
    WeakSelf;
    NSURLSessionDataTask *dataTask = [manager dataTaskWithRequest:request completionHandler:^(NSURLResponse *response, id responseObject, NSError *error) {
         // 关闭菊花
        [MBProgressHUD hideHUDForView:weakSelf.view animated:YES];
        
        // 数据处理
        if (error) {
            NSLog(@"Error: %@", error);
//            [CommonLogic mbMessageInView:weakSelf.view AndInfo:[error localizedDescription]];
        } else {
            NSDictionary * dataDic = [[NSDictionary alloc] initWithDictionary:responseObject];
            int state = [[dataDic objectForKey:@"status"] intValue];
            // 如果请求成功
            if (state == 1) {
                
            } else {
//                [CommonLogic mbMessageInView:weakSelf.view AndInfo:dataDic[@"failReason"]];
            }
        }
    }];
    [dataTask resume];
}

@end
